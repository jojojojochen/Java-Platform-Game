package entity;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import tilemap.TileMap;

public class Player extends MapObject{

	//player stuff
	private int health,maxHP,fire,maxFire;
	private boolean dead,flinching;
	private long flinchTimer;
	
	//fireball
	private boolean firing;
	private int fireCost,fireBallDamage;
	private ArrayList<FireBall>fireBalls;
	
	//scratch
	private boolean scratching;
	private int scratchDamage,scratchRange;
	
	//gliding 
	private boolean gliding;
	
	//animations
	private ArrayList<BufferedImage[]>sprites;
	private final int numFrames[]={2,8,2,4,4,2,6};
	
	
	//animation actions
	private static final int IDLE=0;
	private static final int WALKING=1;
	private static final int JUMPING=2;
	private static final int FALLING=3;
	private static final int GLIDING=4;
	private static final int FIREBALL=5;
	private static final int SCRATCHING=6;
	
	public Player (TileMap tm){
		super(tm);
		
		width=30;
		height=30;
		cwidth=25;
		cheight=25;
		
		moveSpeed=0.3*1.5;
		maxSpeed=1.6*1.5;
		stopSpeed=0.4*1.5;
		fallSpeed=0.25*1.5;
		maxFallSpeed=4.0*1.5;
		jumpStart=-7;
		stopJumpSpeed=0.3*1.5;
        
		facingRight=true;
        
		health=maxHP=5;
		fire=maxFire=2500;
		fireBalls = new ArrayList<FireBall>();
		
		fireCost=250;
		fireBallDamage=5;
		
		scratchDamage=8;
		scratchRange=40;
		
		//load sprites
		try{
			BufferedImage spritesheet=ImageIO.read(getClass().getResourceAsStream("/Sprites/Player/playersprites3.png"));
            sprites=new ArrayList<BufferedImage[]>();
			for(int i=0;i<7;i++){
				BufferedImage[] bi=new BufferedImage[numFrames[i]];
				for(int j=0;j<numFrames[i];j++){
					if(i!=6)
					{
						bi[j]=spritesheet.getSubimage(j*width,i*height,width,height);
					}
					else
					{
						bi[j]=spritesheet.getSubimage(j*width*2,i*height,width*2,height);
					}
				}
				sprites.add(bi);
			}
		}
		catch(Exception e){
			e.printStackTrace();
		}
		animation = new Animation();
		currentAction=IDLE;
		animation.setFrames(sprites.get(IDLE));
		animation.setDelay(400);
	}
	
	public int getHealth(){return health;}
	public int getmaxHP(){return maxHP;}
	public int getFire(){return fire;}
	public int getMaxFire(){return maxFire;}
	public void setFiring(){
		firing=true;
	}
	public void setScratching(){
		scratching=true;
	}
	public void setGliding(boolean b){
		gliding =b;
	}
	
	private void getNextPosition() {
		//movement
		if(left){dx-=moveSpeed; if(dx<-maxSpeed){dx=-maxSpeed;}}
		else if(right){dx+=moveSpeed; if(dx>maxSpeed){dx=maxSpeed;}}
		else
		{
			if(dx>0){
				dx-=stopSpeed;
				if(dx<0){dx=0;}
			}
			else if(dx<0){
				dx+=stopSpeed;
				if(dx>0){dx=0;}
			}
		}
		//cannot move while attacking, except in air
		if((currentAction==SCRATCHING || currentAction==FIREBALL) && !(jumping || falling)){
			dx=0;
		}
		//jumping, not gliding
		if(jumping && !falling){
			dy=jumpStart;
			falling=true;
		}
		//falling
		if(falling){
			if(dy>0 && gliding){dy+=fallSpeed*0.1;} //gliding
			else{dy+=fallSpeed;} //falling
			if(dy>0){jumping=false;}
			if(dy<0 && !jumping){dy+=stopJumpSpeed;}
			if(dy>maxFallSpeed){dy=maxFallSpeed;}
			
		}
		
	}
	
	public void update(){
		//update position
		getNextPosition();
		checkTileMapCollision();
		setPosition(xtemp,ytemp);
		
		//check attack has stopped
		if(currentAction==SCRATCHING){
			if(animation.hasplayedonce()){scratching=false;}
		}
		if(currentAction==FIREBALL){
			if(animation.hasplayedonce()){firing=false;}
		}
		
		//fireball attack
		fire++; //Continuously regenerate the fireball
		if(fire>maxFire){fire=maxFire;}
		if(firing&&currentAction!=FIREBALL){
			if(fire>fireCost){
				fire-=fireCost;
				FireBall fb=new FireBall(tileMap,facingRight);
				fb.setPosition(x, y);
				fireBalls.add(fb);
			}
		}
		
		//update fireballs
		for(int i=0;i<fireBalls.size();i++){
			fireBalls.get(i).update();
			if(fireBalls.get(i).shouldRemove()){
				fireBalls.remove(i);
				i--;
			}
		}
		
		//set animation
		if(scratching){
			if(currentAction!=SCRATCHING){
				currentAction=SCRATCHING;
				animation.setFrames(sprites.get(SCRATCHING));
				animation.setDelay(50);
				width=60;
			}
		}
		else if(firing){
			if(currentAction!=FIREBALL){
				currentAction=FIREBALL;
				animation.setFrames(sprites.get(FIREBALL));
				animation.setDelay(100);
				width=30;
			}
		}
		else if(dy>0){
			if(gliding){
				if(currentAction!=GLIDING){
					currentAction=GLIDING;
					animation.setFrames(sprites.get(GLIDING));
					animation.setDelay(100);
					width=30;
				}
			}
			else if(currentAction!=FALLING){
				currentAction=FALLING;
				animation.setFrames(sprites.get(FALLING));
				animation.setDelay(100);
				width=30;
			}
		}
		else if(dy<0){
			if(currentAction!=JUMPING){
				currentAction=JUMPING;
				animation.setFrames(sprites.get(JUMPING));
				animation.setDelay(-1);
				width=30;
			}
		}
		else if(left||right){
			if(currentAction!=WALKING){
				currentAction=WALKING;
				animation.setFrames(sprites.get(WALKING));
				animation.setDelay(40);
				width=30;
			}
		}
		else
		{
			if(currentAction!=IDLE){
				currentAction=IDLE;
				animation.setFrames(sprites.get(IDLE));
				animation.setDelay(400);
				width=30;
			}
		}
		animation.update();
		//set direction
		if(currentAction!=SCRATCHING && currentAction!=FIREBALL){
			if(right){facingRight=true;}
			if(left){facingRight=false;}
		}
	}

	public void draw(Graphics2D g){
		setMapPosition();
		
		//draw fireballs
		for(int i=0;i<fireBalls.size();i++){
			fireBalls.get(i).draw(g);
		}
		
		//draw player
		if(flinching){
			long elapsed=(System.nanoTime() - flinchTimer)/1000000;
			if(elapsed/100%2==0){return;}
		}
		if(facingRight){
			g.drawImage(animation.getImage(),(int)(x+xmap-width/2),(int)(y+ymap-height/2),null);
		}
		else{
			g.drawImage(animation.getImage(),(int)(x+xmap-width/2+width),(int)(y+ymap-height/2),-width,height,null);
		}
	}
}
